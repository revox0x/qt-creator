// Copyright (C) 2023 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \page creator-build-settings-qmake.html
    \previouspage creator-reference.html

    \ingroup creator-reference-build-configurations

    \title qmake Build Configuration

    \brief Settings for building applications with qmake.

    Specify build settings for the selected \l{Kits}{kit}
    in \uicontrol Projects > \uicontrol {Build & Run}
    > \uicontrol Build > \uicontrol {Build Settings}.

    \image qtcreator-projectpane.webp {qmake build settings}

    \section1 Build Directory

    By default, \QC builds qmake projects (that have .pro files) in a separate
    directory from the source directory, as \l{glossary-shadow-build}
    {shadow builds}. This keeps the files generated for each kit separate. If
    you only build and run with a single kit, you can deselect the
    \uicontrol {Shadow build} checkbox.

    Select the build directory in the \uicontrol {Build Directory} field. You
    can use the \l{Use Qt Creator variables}{variables} that are listed when
    you select the \inlineimage icons/replace.png (\uicontrol {Variables})
    button.

    To make in-source builds the default option for all projects, select
    \preferences > \uicontrol {Build & Run} >
    \uicontrol {Default Build Properties}, and enter a period (.) in the
    \uicontrol {Default build directory} field.

    \section1 Tooltips in Kit Selector

    In the \uicontrol {Tooltip in target selector} field, you can enter text
    that is displayed as a tooltip when you hover the mouse over the build
    configuration in the \l{Build for many platforms}{kit selector}.

    You can create separate versions of project files to keep platform-dependent
    code separate. You can use qmake \l{Adding Platform Specific Source Files}
    {scopes} to select the file to process depending on which platform qmake is
    run on.

    \section1 Separating Debug Info

    If debug info is being generated, you can have it placed into separate
    files, rather than embedded into the binary, by selecting
    \uicontrol Enable in the \uicontrol {Separate debug info} field. For
    more information, see \l{Analyze CPU usage}. To use default
    settings, select \uicontrol {Leave at Default}.

    \section1 Compiling QML

    You can compile QML source code into the final binary to improve the
    startup time of the application and eliminate the need to deploy QML
    files together with the application. For more information, see
    \l{Ahead-of-Time Compilation}.

    \QC project wizard templates create Qt Quick projects that can be compiled
    because they are set up to use the Qt Resource System. To compile QML code,
    select \uicontrol Enable in the \uicontrol {Qt Quick Compiler} field. To
    use default settings, select \uicontrol {Leave at Default}.

    You can specify default behavior for compiling QML code in \preferences >
    \uicontrol {Build & Run} > \uicontrol Qmake > \uicontrol {Use qmlcachegen}.

    \section1 Parsing Project Contents

    In the \uicontrol {qmake system() behavior when parsing} field, you can
    select whether processes are run via qmake's \c system() function or
    ignored. Setting this option to \uicontrol Ignore might help if opening
    or closing projects takes too long, but it might produce inexact parsing
    results.

    \section1 Global qmake Settings

    To specify settings for all qmake builds, select \preferences >
    \uicontrol {Build & Run} > \uicontrol Qmake.

    \image qtcreator-preferences-build-run-qmake.png {Qmake tab in Build & Run Preferences}

    To set the default build properties, select \preferences >
    \uicontrol {Build & Run} > \uicontrol {Default Build Properties}.

    \image qtcreator-build-settings-default.webp {Default Build Properties tab in Build & Run Preferences}

    In the \uicontrol {Default build directory} field, you can use the variables
    that are listed when you select \inlineimage icons/replace.png, as well as
    variables that are available for a particular kit. Those you can see when
    you select the button in the \uicontrol Projects > \uicontrol {Build & Run} >
    \uicontrol Build > \uicontrol {Build Settings} > \uicontrol {Build Directory}
    field for a kit.

    \section1 qmake Build Steps

    \QC builds qmake projects by running the \c make or \c nmake command from
    the Qt version defined for the current build configuration.

    \image qtcreator-build-steps.png {qmake build steps}

    To override the shell command that \QC constructs by default, disable or
    remove the build step and add a custom build step that specifies another
    shell command.

    By default, \QC uses all the CPU cores available to achieve maximum build
    parallelization. On Linux and \macos, you can specify the number of parallel
    jobs to use for building in the \uicontrol {Parallel jobs} field. Select the
    \uicontrol {Override MAKEFLAGS} check box to override existing MAKEFLAGS
    variables.

    Select \uicontrol {Disable in subdirectories} to execute the build step
    only for a top-level build.

    Select \uicontrol {Add Build Step} > \uicontrol {IncrediBuild for Linux} or
    \uicontrol {IncrediBuild for Windows} to accelerate builds by using
    \l{IncrediBuild Build Configuration}{IncrediBuild}.

    Select \uicontrol {Add Build Step} > \uicontrol {Run Conan Install} to use
    the \l{Conan Build Configuration}{Conan} package manager with qmake

    \sa {Activate kits for a project}, {Configure projects for building},
    {Configure projects for running}, {Open projects}

*/
